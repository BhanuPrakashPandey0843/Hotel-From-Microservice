To test your entire Spring Boot project with Postman, you need to test each API endpoint individually. Here's a structured approach to ensure you cover all the functionality of your project:

---

### **Step 1: Prerequisites**
1. **Start the Application**:
   - Ensure your Spring Boot application is running (usually at `http://localhost:8080` by default).
2. **Set Up Postman**:
   - Download and install [Postman](https://www.postman.com/).
   - Create a new collection in Postman to organize all API tests.

3. **Database Setup**:
   - Ensure MongoDB is running locally or in the cloud and the necessary collections are created.
   - Insert any test data if required for endpoints that fetch existing data.

---

### **Step 2: Test Each API Endpoint**

#### 1. **Location APIs**
   **Add a Location**  
   - Method: `POST`  
   - URL: `http://localhost:8080/api/locations`  
   - Body (JSON):  
     ```json
     {
       "hotelId": "H123",
       "latitude": 28.6139,
       "longitude": 77.2090,
       "pinCode": "110001",
       "address": "Connaught Place, New Delhi",
       "landmark": "Central Park"
     }
     ```
   - Expected Response:
     ```json
     "Location added successfully"
     ```

   **Get Locations by Hotel ID**  
   - Method: `GET`  
   - URL: `http://localhost:8080/api/locations/H123`  
   - Expected Response (example):
     ```json
     [
       {
         "id": "64f1cf109a9df35b1c234567",
         "hotelId": "H123",
         "gmapLocation": {
           "latitude": 28.6139,
           "longitude": 77.2090
         },
         "pinCode": "110001",
         "address": "Connaught Place, New Delhi",
         "landmark": "Central Park"
       }
     ]
     ```

---

#### 2. **Amenity APIs**
   **Add an Amenity**  
   - Method: `POST`  
   - URL: `http://localhost:8080/api/amenities`  
   - Body (JSON):  
     ```json
     {
       "hotelId": "H123",
       "amenityName": "WiFi"
     }
     ```
   - Expected Response:
     ```json
     "Amenity added successfully"
     ```

   **Fetch All Amenities**  
   - Method: `GET`  
   - URL: `http://localhost:8080/api/amenities`  
   - Expected Response (example):
     ```json
     [
       {
         "id": "64f1cf109a9df35b1c234568",
         "hotelId": "H123",
         "amenityName": "WiFi"
       },
       {
         "id": "64f1cf109a9df35b1c234569",
         "hotelId": "H124",
         "amenityName": "Parking"
       }
     ]
     ```

   **Fetch Amenities by Hotel ID**  
   - Method: `GET`  
   - URL: `http://localhost:8080/api/amenities/H123`  
   - Expected Response:
     ```json
     [
       {
         "id": "64f1cf109a9df35b1c234568",
         "hotelId": "H123",
         "amenityName": "WiFi"
       }
     ]
     ```

---

### **Step 3: Error Handling Tests**
1. **Invalid Input for Adding a Location**  
   - Method: `POST`  
   - URL: `http://localhost:8080/api/locations`  
   - Body (missing required field `hotelId`):  
     ```json
     {
       "latitude": 28.6139,
       "longitude": 77.2090,
       "pinCode": "110001",
       "address": "Connaught Place, New Delhi",
       "landmark": "Central Park"
     }
     ```
   - Expected Response:
     ```json
     {
       "status": 400,
       "error": "Bad Request",
       "message": "hotelId must not be blank"
     }
     ```

2. **Fetch Locations with Non-Existent Hotel ID**  
   - Method: `GET`  
   - URL: `http://localhost:8080/api/locations/INVALID_HOTEL_ID`  
   - Expected Response:
     ```json
     []
     ```

---

### **Step 4: Performance Testing**
Use Postman's **Collection Runner**:
- Add all your requests to a collection.
- Set up test scripts to validate the responses automatically.
- Run the collection to test all endpoints in one go.

---

### **Step 5: Advanced Features**
1. **Authorization**:
   - If your APIs are secured with JWT or Basic Auth, include the `Authorization` header in each request.
     ```text
     Authorization: Bearer <your-jwt-token>
     ```

2. **Environment Variables**:
   - Define variables like `{{baseUrl}}` for the base URL (`http://localhost:8080`).
   - Update your requests to use `{{baseUrl}}/api/...`.

3. **Documentation**:
   - Use Postman to auto-generate API documentation for your project and share it with your team.

---

### **Summary**
By following the above steps:
1. You test all API endpoints (add, fetch, handle invalid inputs).
2. You ensure performance and error handling.
3. You prepare for real-world scenarios, including authorization and environment setup.

Let me know if you need help setting up any additional functionality!

To create an API for handling **Amenities**, we will implement the following:

### Requirements:
1. **Dropdown for Amenities**:
   - Data stored in MongoDB.
   - Allows the admin to manage available amenities (add/remove/update).
   - Dropdown for users to select available amenities for a hotel.

2. **Features**:
   - Add amenities.
   - Fetch all amenities.
   - Fetch amenities for a specific hotel.
   - Update or delete amenities if needed.

---

### Suggested File Structure:
```
src
├── main
│   ├── java
│   │   ├── com
│   │   │   └── example
│   │   │       └── rest_api
│   │   │           ├── controller
│   │   │           │   ├── AmenityController.java
│   │   │           ├── dto
│   │   │           │   ├── AmenityDto.java
│   │   │           ├── model
│   │   │           │   ├── Amenity.java
│   │   │           ├── repository
│   │   │           │   ├── AmenityRepository.java
│   │   │           ├── service
│   │   │           │   ├── AmenityService.java
```

---

### Full Code:

#### 1. **`AmenityController.java`**
```java
package com.example.rest_api.controller;

import com.example.rest_api.dto.AmenityDto;
import com.example.rest_api.model.Amenity;
import com.example.rest_api.service.AmenityService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/amenities")
public class AmenityController {

    private final AmenityService amenityService;

    public AmenityController(AmenityService amenityService) {
        this.amenityService = amenityService;
    }

    // Add a new amenity
    @PostMapping
    public ResponseEntity<String> addAmenity(@RequestBody AmenityDto amenityDto) {
        amenityService.addAmenity(amenityDto);
        return ResponseEntity.ok("Amenity added successfully");
    }

    // Get all amenities
    @GetMapping
    public ResponseEntity<List<Amenity>> getAllAmenities() {
        return ResponseEntity.ok(amenityService.getAllAmenities());
    }

    // Get amenities for a specific hotel
    @GetMapping("/{hotelId}")
    public ResponseEntity<List<Amenity>> getAmenitiesByHotelId(@PathVariable String hotelId) {
        return ResponseEntity.ok(amenityService.getAmenitiesByHotelId(hotelId));
    }
}
```

---

#### 2. **`AmenityDto.java`**
```java
package com.example.rest_api.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class AmenityDto {
    @NotBlank
    private String hotelId;

    @NotBlank
    private String amenityName;
}
```

---

#### 3. **`Amenity.java`**
```java
package com.example.rest_api.model;

import lombok.Data;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Data
@Document(collection = "amenities")
public class Amenity {
    @Id
    private String id;
    private String hotelId;
    private String amenityName;
}
```

---

#### 4. **`AmenityRepository.java`**
```java
package com.example.rest_api.repository;

import com.example.rest_api.model.Amenity;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface AmenityRepository extends MongoRepository<Amenity, String> {
    List<Amenity> findByHotelId(String hotelId);
}
```

---

#### 5. **`AmenityService.java`**
```java
package com.example.rest_api.service;

import com.example.rest_api.dto.AmenityDto;
import com.example.rest_api.model.Amenity;
import com.example.rest_api.repository.AmenityRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AmenityService {

    private final AmenityRepository amenityRepository;

    public AmenityService(AmenityRepository amenityRepository) {
        this.amenityRepository = amenityRepository;
    }

    // Add a new amenity
    public void addAmenity(AmenityDto amenityDto) {
        Amenity amenity = new Amenity();
        amenity.setHotelId(amenityDto.getHotelId());
        amenity.setAmenityName(amenityDto.getAmenityName());
        amenityRepository.save(amenity);
    }

    // Get all amenities
    public List<Amenity> getAllAmenities() {
        return amenityRepository.findAll();
    }

    // Get amenities by hotel ID
    public List<Amenity> getAmenitiesByHotelId(String hotelId) {
        return amenityRepository.findByHotelId(hotelId);
    }
}
```

---

### MongoDB Collection:
```json
{
  "_id": "64f0cfe91c549c1f94a5ab2d",
  "hotelId": "12345",
  "amenityName": "WiFi"
}
```

---

### Testing with Postman:

1. **Add a New Amenity**
   - Method: `POST`
   - URL: `http://localhost:8080/api/amenities`
   - Body:
     ```json
     {
       "hotelId": "12345",
       "amenityName": "WiFi"
     }
     ```

2. **Fetch All Amenities**
   - Method: `GET`
   - URL: `http://localhost:8080/api/amenities`

3. **Fetch Amenities for a Specific Hotel**
   - Method: `GET`
   - URL: `http://localhost:8080/api/amenities/12345`

---

### Enhancements:
1. **Dropdown for Amenities**:
   Use the `/api/amenities` endpoint to dynamically populate the dropdown in your frontend.

2. **Validation**:
   - Validate `hotelId` and `amenityName` using `@NotBlank`.
   - Handle exceptions for invalid inputs using a global exception handler in Spring Boot.

3. **Scalability**:
   - Add an endpoint for updating or deleting amenities if required.

4. **UI Integration**:
   - Populate the dropdown in your UI with the list of amenities fetched from `/api/amenities`.
   - Use libraries like **React-Select** or **Material UI Dropdown** for a polished look.

---

Let me know if you need help with the frontend dropdown implementation or additional endpoints for this API!